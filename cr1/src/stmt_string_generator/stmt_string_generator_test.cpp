#include <string>
#include <iostream>

#include "stmt_string_generator.hpp"

using namespace std;
using namespace ashs;

// Test functions
static void FunctionsTest();
static void AddStringFuncTest();
static void RemoveStringFuncTest();

// Test Class
class StrFuncClass
{
public:
    const std::string& Func1();
    const std::string& Func2();

    const std::string& GetStmtString() { return stmtString; }

private:
    std::string stmtString;
};

// Helper functions
void PrintReoprt(const char* testName, size_t passes, size_t errors);

// StringFunc outputs
static const std::string func1Str("This string is generated by Func1");
static const std::string func2Str("This string is generated by Func2");

// Boost includes
#include <boost/bind.hpp>			    // boost::bind

int main()
{
    FunctionsTest();
    AddStringFuncTest();
    RemoveStringFuncTest();

    return 0;
}

// Test functions //////////////////////////////////////////////////////////////////////////

static void FunctionsTest()
{
    string str;
    size_t errors = 0, passes = 0;

    StrFuncClass strFuncObj;
    
    strFuncObj.Func1() == func1Str ? ++passes : ++errors;
    strFuncObj.Func2() == func2Str ? ++passes : ++errors;

    PrintReoprt("FunctionsTest", passes, errors);
}

static void AddStringFuncTest()
{
    string str;
    size_t errors = 0, passes = 0;
    
    StmtStringGenerator strGen;
    StrFuncClass strFuncObj;

    // add functions and generate by key
    strGen.AddStringFunc("key1", [&strFuncObj](){ return strFuncObj.Func1(); }  );
    strGen.AddStringFunc("key2", [&strFuncObj](){ return strFuncObj.Func2(); }  );

    strGen.GenerateString("key1");
    strFuncObj.GetStmtString() == func1Str ? ++passes : ++errors;

    strGen.GenerateString("key2");
    strFuncObj.GetStmtString() == func2Str ? ++passes : ++errors;

    // Generate non-existing key
    strGen.GenerateString("key3");
    strFuncObj.GetStmtString() == func2Str ? ++passes : ++errors;

    // add a function with an occupied key
    strGen.AddStringFunc("key2", [&strFuncObj](){ return strFuncObj.Func1(); }  );
    strGen.GenerateString("key2");
    strFuncObj.GetStmtString() == func2Str ? ++passes : ++errors;

    PrintReoprt("AddStringFuncTest", passes, errors);
}

static void RemoveStringFuncTest()
{
    string str;
    size_t errors = 0, passes = 0;
    
    StmtStringGenerator strGen;
    StrFuncClass strFuncObj;

    strGen.AddStringFunc("key1", [&strFuncObj](){ return strFuncObj.Func1(); }  );
    strGen.AddStringFunc("key2", [&strFuncObj](){ return strFuncObj.Func2(); }  );

    strGen.RemoveStringFunc("key2");
    strGen.GenerateString("key1");
    strFuncObj.GetStmtString() == func1Str ? ++passes : ++errors;
    strGen.GenerateString("key2");
    strFuncObj.GetStmtString() == func1Str ? ++passes : ++errors;

    // Remove with non-existing key
    try    
    {
        strGen.RemoveStringFunc("key3");
    }
    catch(const std::out_of_range& e)
    {
        ++errors;
    }
    ++passes;

    PrintReoprt("RemoveStringFuncTest", passes, errors);
}

// Test StringFuncs ////////////////////////////////////////////////////////////////////////

const string& StrFuncClass::Func1()
{
    stmtString = "This string is generated by Func1";
    return stmtString;
}

const string& StrFuncClass::Func2()
{
    stmtString = "This string is generated by Func2";
    return stmtString;
}

// Helper Functions ////////////////////////////////////////////////////////////////////////

void PrintReoprt(const char* testName, size_t passes, size_t errors)
{
    cout << testName << ": "
    << passes << " successful. "
    << errors << " errors." << endl;
}