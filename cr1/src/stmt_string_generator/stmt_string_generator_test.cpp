#include <string>
#include <iostream>

#include "stmt_string_generator.hpp"

using namespace std;
using namespace ashs;

// Test functions
static void FunctionsTest();
static void AddStringFuncTest();
static void RemoveStringFuncTest();

// Test StringFuncs
class StrFuncClass
{
public:
    const std::string Func1();
    const std::string Func2();
};

// Helper functions
void PrintReoprt(const char* testName, size_t passes, size_t errors);

// StringFunc outputs
static const std::string func1Str("This string is generated by Func1");
static const std::string func2Str("This string is generated by Func2");

// Boost includes
#include <boost/bind.hpp>			    // boost::bind

int main()
{
    FunctionsTest();
    AddStringFuncTest();
    RemoveStringFuncTest();

    return 0;
}

// Test functions //////////////////////////////////////////////////////////////////////////

static void FunctionsTest()
{
    string str;
    size_t errors = 0, passes = 0;
    StrFuncClass strFuncObj;
    
    strFuncObj.Func1() == func1Str ? ++passes : ++errors;
    strFuncObj.Func2() == func2Str ? ++passes : ++errors;

    PrintReoprt("FunctionsTest", passes, errors);
}

static void AddStringFuncTest()
{
    string str;
    size_t errors = 0, passes = 0;
    
    StmtStringGenerator strGen;
    StrFuncClass strFuncObj;

    // add functions and generate by key
    strGen.AddStringFunc("1", boost::bind(&StrFuncClass::Func1, strFuncObj));
    strGen.AddStringFunc("2", boost::bind(&StrFuncClass::Func2, strFuncObj));

    strGen.GenerateString("1") == func1Str ? ++passes : ++errors;

    strGen.GenerateString("2") == func2Str ? ++passes : ++errors;

    // Generate non-existing key
    strGen.GenerateString("3") == "" ? ++passes : ++errors;

    // add a function with an occupied key
    strGen.AddStringFunc("2", boost::bind(&StrFuncClass::Func1, strFuncObj));
    strGen.GenerateString("2") == func2Str ? ++passes : ++errors;

    PrintReoprt("AddStringFuncTest", passes, errors);
}

static void RemoveStringFuncTest()
{
    string str;
    size_t errors = 0, passes = 0;
    
    StmtStringGenerator strGen;
    StrFuncClass strFuncObj;

    // add functions, remove and generate by key
    strGen.AddStringFunc("1", boost::bind(&StrFuncClass::Func1, strFuncObj));
    strGen.AddStringFunc("2", boost::bind(&StrFuncClass::Func2, strFuncObj));

    strGen.RemoveStringFunc("2");
    strGen.GenerateString("1") == func1Str ? ++passes : ++errors;
    strGen.GenerateString("2") == "" ? ++passes : ++errors;

    // Remove with non-existing key
    try
    {
        strGen.RemoveStringFunc("3");
    }
    catch(const std::out_of_range& e)
    {
        ++errors;
    }
    ++passes;

    PrintReoprt("RemoveStringFuncTest", passes, errors);
}

// Test StringFuncs ////////////////////////////////////////////////////////////////////////

const string StrFuncClass::Func1()
{
    string str("This string is generated by Func1");
    return str;
}

const string StrFuncClass::Func2()
{
    string str("This string is generated by Func2");
    return str;
}

// Helper Functions ////////////////////////////////////////////////////////////////////////

void PrintReoprt(const char* testName, size_t passes, size_t errors)
{
    cout << testName << ": "
    << passes << " successful. "
    << errors << " errors." << endl;
}