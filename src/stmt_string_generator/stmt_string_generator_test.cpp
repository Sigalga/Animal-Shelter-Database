#include <string>
#include <iostream>

#include "stmt_string_generator.hpp"

using namespace std;
using namespace ashs;

// Test functions
void FunctionsTest();
void AddStringFuncTest();
void RemoveStringFuncTest();

// Test StringFuncs
string& Func1(const string& col, const string& val);
string& Func2(const string& col, const string& val);

// StringFunc outputs
const string func1Str("This string is generated by Func1. col: func1_col. val: func1_val");
const string func2Str("This string is generated by Func2");

int main()
{
    FunctionsTest();
    AddStringFuncTest();
    RemoveStringFuncTest();

    return 0;
}

// Test functions //////////////////////////////////////////////////////////////////////////

void FunctionsTest()
{
    string str;
    size_t errors = 0, pass = 0;
    
    str = (Func1("func1_col", "func1_val"));
    0 == str.compare(func1Str) ? ++pass : ++errors;

    str = Func2("func2_col", "func2_val");
    0 == str.compare(func2Str) ? ++pass : ++errors;

    cout << "Functions Test: "
    << pass << " successful. "
    << errors << " errors." << endl;
}

void AddStringFuncTest()
{
    string str;
    size_t errors = 0, pass = 0;
    
    StmtStringGenerator strGen;

    // add functions and generate by key
    strGen.AddStringFunc(1, &Func1);
    strGen.AddStringFunc(2, &Func2);

    str = strGen.GenerateString(1, "func1_col", "func1_val");
    0 == str.compare(func1Str) ? ++pass : ++errors;

    str = strGen.GenerateString(2, "func2_col", "func2_val");
    0 == str.compare(func2Str) ? ++pass : ++errors;

    // Generate non-existing key
    str = strGen.GenerateString(3, "func3_col", "func3_val");
    0 == str.compare("") ? ++pass : ++errors;

    // add a function with an occupied key
    strGen.AddStringFunc(2, &Func1);
    str = strGen.GenerateString(2, "func1_col", "func1_val");
    0 == str.compare(func2Str) ? ++pass : ++errors;

    // print report
    cout << "AddStringFunc Test: "
    << pass << " successful. "
    << errors << " errors." << endl;
}

void RemoveStringFuncTest()
{
    string str;
    size_t errors = 0, pass = 0;
    
    StmtStringGenerator strGen;

    // add functions, remove and generate by key
    strGen.AddStringFunc(1, &Func1);
    strGen.AddStringFunc(2, &Func2);

    strGen.RemoveStringFunc(2);
    str = strGen.GenerateString(1, "func1_col", "func1_val");
    0 == str.compare(func1Str) ? ++pass : ++errors;
    str = strGen.GenerateString(2, "func2_col", "func2_val");
    0 == str.compare("") ? ++pass : ++errors;

    // Remove with non-existing key
    try
    {
        strGen.RemoveStringFunc(3);
    }
    catch(const std::out_of_range& e)
    {
        ++errors;
    }
    ++pass;

    // print report
    cout << "RemoveStringFunc Test: "
    << pass << " successful. "
    << errors << " errors." << endl;
}

// Test StringFuncs ////////////////////////////////////////////////////////////////////////

string& Func1(const string& col, const string& val)
{
    string* str = new string("This string is generated by Func1");
    str->append(". col: ");
    str->append(col);
    str->append(". val: ");
    str->append(val);

    return *str;
}

string& Func2(const string& col, const string& val)
{
    string* str = new string("This string is generated by Func2");

    return *str;
}